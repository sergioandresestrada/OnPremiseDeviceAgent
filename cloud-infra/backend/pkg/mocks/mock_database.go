// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "backend/pkg/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteDeviceFromUUID mocks base method.
func (m *MockDatabase) DeleteDeviceFromUUID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceFromUUID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeviceFromUUID indicates an expected call of DeleteDeviceFromUUID.
func (mr *MockDatabaseMockRecorder) DeleteDeviceFromUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceFromUUID", reflect.TypeOf((*MockDatabase)(nil).DeleteDeviceFromUUID), arg0)
}

// DeviceExistWithNameAndIP mocks base method.
func (m *MockDatabase) DeviceExistWithNameAndIP(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceExistWithNameAndIP", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceExistWithNameAndIP indicates an expected call of DeviceExistWithNameAndIP.
func (mr *MockDatabaseMockRecorder) DeviceExistWithNameAndIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceExistWithNameAndIP", reflect.TypeOf((*MockDatabase)(nil).DeviceExistWithNameAndIP), arg0, arg1)
}

// DeviceIPAndUUIDFromName mocks base method.
func (m *MockDatabase) DeviceIPAndUUIDFromName(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceIPAndUUIDFromName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeviceIPAndUUIDFromName indicates an expected call of DeviceIPAndUUIDFromName.
func (mr *MockDatabaseMockRecorder) DeviceIPAndUUIDFromName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceIPAndUUIDFromName", reflect.TypeOf((*MockDatabase)(nil).DeviceIPAndUUIDFromName), arg0)
}

// DeviceIPFromName mocks base method.
func (m *MockDatabase) DeviceIPFromName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceIPFromName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceIPFromName indicates an expected call of DeviceIPFromName.
func (mr *MockDatabaseMockRecorder) DeviceIPFromName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceIPFromName", reflect.TypeOf((*MockDatabase)(nil).DeviceIPFromName), arg0)
}

// GetDeviceByUUID mocks base method.
func (m *MockDatabase) GetDeviceByUUID(arg0 string) (types.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByUUID", arg0)
	ret0, _ := ret[0].(types.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByUUID indicates an expected call of GetDeviceByUUID.
func (mr *MockDatabaseMockRecorder) GetDeviceByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByUUID", reflect.TypeOf((*MockDatabase)(nil).GetDeviceByUUID), arg0)
}

// GetDevices mocks base method.
func (m *MockDatabase) GetDevices() ([]types.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices")
	ret0, _ := ret[0].([]types.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockDatabaseMockRecorder) GetDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockDatabase)(nil).GetDevices))
}

// GetMessagesFromDevice mocks base method.
func (m *MockDatabase) GetMessagesFromDevice(arg0 string) ([]types.MessageDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesFromDevice", arg0)
	ret0, _ := ret[0].([]types.MessageDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesFromDevice indicates an expected call of GetMessagesFromDevice.
func (mr *MockDatabaseMockRecorder) GetMessagesFromDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesFromDevice", reflect.TypeOf((*MockDatabase)(nil).GetMessagesFromDevice), arg0)
}

// GetResponsesFromMessage mocks base method.
func (m *MockDatabase) GetResponsesFromMessage(arg0, arg1 string) ([]types.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesFromMessage", arg0, arg1)
	ret0, _ := ret[0].([]types.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesFromMessage indicates an expected call of GetResponsesFromMessage.
func (mr *MockDatabaseMockRecorder) GetResponsesFromMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesFromMessage", reflect.TypeOf((*MockDatabase)(nil).GetResponsesFromMessage), arg0, arg1)
}

// InsertDevice mocks base method.
func (m *MockDatabase) InsertDevice(arg0 types.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDevice indicates an expected call of InsertDevice.
func (mr *MockDatabaseMockRecorder) InsertDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDevice", reflect.TypeOf((*MockDatabase)(nil).InsertDevice), arg0)
}

// InsertMessage mocks base method.
func (m *MockDatabase) InsertMessage(arg0 types.MessageDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockDatabaseMockRecorder) InsertMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockDatabase)(nil).InsertMessage), arg0)
}

// InsertResult mocks base method.
func (m *MockDatabase) InsertResult(arg0 types.ResultDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResult", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResult indicates an expected call of InsertResult.
func (mr *MockDatabaseMockRecorder) InsertResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResult", reflect.TypeOf((*MockDatabase)(nil).InsertResult), arg0)
}

// UpdateDevice mocks base method.
func (m *MockDatabase) UpdateDevice(arg0 types.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDatabaseMockRecorder) UpdateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDatabase)(nil).UpdateDevice), arg0)
}
